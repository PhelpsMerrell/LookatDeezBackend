using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Extensions.Logging;\nusing LookatDeezBackend.Extensions;\nusing LookatDeezBackend.Helpers;\nusing System.Net;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Text.Json;\n\nnamespace LookatDeezBackend.Functions\n{\n    public class DebugFunctions\n    {\n        private readonly ILogger<DebugFunctions> _logger;\n\n        public DebugFunctions(ILogger<DebugFunctions> logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"DebugToken\")]\n        public async Task<HttpResponseData> DebugToken(\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"options\", Route = \"debug/token\")] HttpRequestData req)\n        {\n            // Handle CORS preflight requests\n            if (req.Method.Equals(\"OPTIONS\", StringComparison.OrdinalIgnoreCase))\n            {\n                return await CorsHelper.HandlePreflightRequest(req);\n            }\n\n            try\n            {\n                var response = CorsHelper.CreateCorsResponse(req, HttpStatusCode.OK);\n                \n                // Get Authorization header\n                if (!req.Headers.TryGetValues(\"Authorization\", out var authHeaders))\n                {\n                    await response.WriteAsJsonAsync(new\n                    {\n                        error = \"No Authorization header found\",\n                        headers = req.Headers.ToDictionary(h => h.Key, h => h.Value.ToArray())\n                    });\n                    return response;\n                }\n\n                var authHeader = authHeaders.FirstOrDefault();\n                if (string.IsNullOrEmpty(authHeader) || !authHeader.StartsWith(\"Bearer \"))\n                {\n                    await response.WriteAsJsonAsync(new\n                    {\n                        error = \"Invalid Authorization header format\",\n                        authHeader = authHeader\n                    });\n                    return response;\n                }\n\n                var token = authHeader.Substring(7);\n                \n                // Decode JWT without validation to see what's in it\n                var handler = new JwtSecurityTokenHandler();\n                var jsonToken = handler.ReadJwtToken(token);\n                \n                var debugInfo = new\n                {\n                    tokenReceived = true,\n                    tokenLength = token.Length,\n                    header = jsonToken.Header,\n                    claims = jsonToken.Claims.ToDictionary(c => c.Type, c => c.Value),\n                    issuer = jsonToken.Issuer,\n                    audiences = jsonToken.Audiences,\n                    expiry = jsonToken.ValidTo,\n                    notBefore = jsonToken.ValidFrom,\n                    isExpired = jsonToken.ValidTo < DateTime.UtcNow,\n                    environment = new\n                    {\n                        tenantId = Environment.GetEnvironmentVariable(\"AzureAd_TenantId\"),\n                        clientId = Environment.GetEnvironmentVariable(\"AzureAd_ClientId\")\n                    }\n                };\n                \n                await response.WriteAsJsonAsync(debugInfo);\n                return response;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in debug endpoint\");\n                var errorResponse = CorsHelper.CreateCorsResponse(req, HttpStatusCode.InternalServerError);\n                await errorResponse.WriteAsJsonAsync(new { error = ex.Message, stackTrace = ex.StackTrace });\n                return errorResponse;\n            }\n        }\n    }\n}\n